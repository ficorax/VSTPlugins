/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // MU4545_DO_THIS: Create your sliders
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(processor.volumeParam->getActualMinimum(),
                               processor.volumeParam->getActualMaximum(),
                               0.5);
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(processor.volumeParam->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);
    addAndMakeVisible(volumeSlider);
    
	panWheel = new Slider("Volume Panning");
	panWheel->setRange(processor.balance->getActualMinimum(),
		processor.balance->getActualMaximum(),
		0.5);
	panWheel->setSliderStyle(Slider::Rotary);
	panWheel->setTextValueSuffix(processor.balance->getLabel());
	panWheel->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	panWheel->addListener(this);
	addAndMakeVisible(panWheel);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::forestgreen);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    // g.drawFittedText ("Hello Mu45!", getLocalBounds(), Justification::centred, 1);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //MU4545_DO_THIS: Set the location in the GUI for each UI component
    int w = 55; int h = 200; int x = 20; int y = 60;
    volumeSlider->setBounds(x, y, w, h);   

	panWheel->setBounds(160, 120, 100, 50);
}

// This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // MU4545_DO_THIS: make an "else if" for each slider
    if (slider == volumeSlider) {
        parameter = processor.volumeParam;
    }
    else if (slider == panWheel) {
        parameter = processor.balance;
    }
    
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
    
}

// This gets called every N msec so that sliders can update their value if the host
// changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //MU4545_DO_THIS: Update the value of each slider to match the value in the Processor
    volumeSlider->setValue(processor.volumeParam->getActualValue(), dontSendNotification);
	panWheel->setValue(processor.balance->getActualValue(), dontSendNotification);

}



