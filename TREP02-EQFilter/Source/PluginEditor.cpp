/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    /* // MU4545_DO_THIS: Create your sliders
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(processor.volumeParam->getActualMinimum(),
                               processor.volumeParam->getActualMaximum(),
                               0.5);
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(processor.volumeParam->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);
    addAndMakeVisible(volumeSlider);
    
    cutoffSlider = new Slider ("Cutoff Slider");
    cutoffSlider->setRange(processor.filterCutoff->getActualMinimum(),
                           processor.filterCutoff->getActualMaximum(),
                           0.5);
    cutoffSlider->setSliderStyle(Slider::LinearBarVertical);
    cutoffSlider->setTextValueSuffix(processor.filterCutoff->getLabel());
    cutoffSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    cutoffSlider->addListener (this);
    addAndMakeVisible(cutoffSlider);
    */

	// pasted from GUI.cpp constructor:

	// hsf
	addAndMakeVisible(HighShelfGain = new Slider("new slider"));
	HighShelfGain->setRange(processor.hsfGain->getActualMinimum(), processor.hsfGain->getActualMaximum(), 1);
	HighShelfGain->setTextValueSuffix(processor.hsfGain->getLabel());
	HighShelfGain->setSliderStyle(Slider::LinearHorizontal);
	HighShelfGain->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	HighShelfGain->addListener(this);

	addAndMakeVisible(HighShelfGainTxt = new Label("new label",
		TRANS("High Shelf Filter Gain")));
	HighShelfGainTxt->setFont(Font(15.00f, Font::plain));
	HighShelfGainTxt->setJustificationType(Justification::centredLeft);
	HighShelfGainTxt->setEditable(false, false, false);
	HighShelfGainTxt->setColour(TextEditor::textColourId, Colours::black);
	HighShelfGainTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	// hpnf
	addAndMakeVisible(HighPeakNotchGain = new Slider("new slider"));
	HighPeakNotchGain->setRange(processor.hpnfGain->getActualMinimum(), processor.hpnfGain->getActualMaximum(), 1);
	HighPeakNotchGain->setTextValueSuffix(processor.hpnfGain->getLabel());
	HighPeakNotchGain->setSliderStyle(Slider::LinearHorizontal);
	HighPeakNotchGain->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	HighPeakNotchGain->addListener(this);

	addAndMakeVisible(HighPeakNotchBand = new Slider("new slider"));
	HighPeakNotchBand->setRange(processor.hpnfBand->getActualMinimum(), processor.hpnfBand->getActualMaximum(), 1);
	HighPeakNotchBand->setTextValueSuffix(processor.hpnfBand->getLabel());
	HighPeakNotchBand->setSliderStyle(Slider::Rotary);
	HighPeakNotchBand->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	HighPeakNotchBand->addListener(this);

	addAndMakeVisible(HighPeakNotchFreq = new Slider("new slider"));
	HighPeakNotchFreq->setRange(processor.hpnfCutoff->getActualMinimum(), processor.hpnfCutoff->getActualMaximum(), 1);
	HighPeakNotchFreq->setTextValueSuffix(processor.hpnfCutoff->getLabel());
	HighPeakNotchFreq->setSliderStyle(Slider::LinearVertical);
	HighPeakNotchFreq->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	HighPeakNotchFreq->addListener(this);

	addAndMakeVisible(HighPeakNotchFreqTxt = new Label("new label",
		TRANS("Center Freq")));
	HighPeakNotchFreqTxt->setFont(Font(15.00f, Font::plain));
	HighPeakNotchFreqTxt->setJustificationType(Justification::centredLeft);
	HighPeakNotchFreqTxt->setEditable(false, false, false);
	HighPeakNotchFreqTxt->setColour(TextEditor::textColourId, Colours::black);
	HighPeakNotchFreqTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(HighPeakNotchGainTxt = new Label("new label",
		TRANS("Peak/Notch Filter Gain")));
	HighPeakNotchGainTxt->setFont(Font(15.00f, Font::plain));
	HighPeakNotchGainTxt->setJustificationType(Justification::centredLeft);
	HighPeakNotchGainTxt->setEditable(false, false, false);
	HighPeakNotchGainTxt->setColour(TextEditor::textColourId, Colours::black);
	HighPeakNotchGainTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(HighPeakNotchBandTxt = new Label("new label",
		TRANS("High Peak/Notch Filter Bandwidth")));
	HighPeakNotchBandTxt->setFont(Font(15.00f, Font::plain));
	HighPeakNotchBandTxt->setJustificationType(Justification::centredLeft);
	HighPeakNotchBandTxt->setEditable(false, false, false);
	HighPeakNotchBandTxt->setColour(TextEditor::textColourId, Colours::black);
	HighPeakNotchBandTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	// mpnf
	addAndMakeVisible(MidPeakNotchGain = new Slider("new slider"));
	MidPeakNotchGain->setRange(processor.mpnfGain->getActualMinimum(), processor.mpnfGain->getActualMaximum(), 1);
	MidPeakNotchGain->setTextValueSuffix(processor.mpnfGain->getLabel());
	MidPeakNotchGain->setSliderStyle(Slider::LinearHorizontal);
	MidPeakNotchGain->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	MidPeakNotchGain->addListener(this);

	addAndMakeVisible(MidPeakNotchFreq = new Slider("new slider"));
	MidPeakNotchFreq->setRange(processor.mpnfCutoff->getActualMinimum(), processor.mpnfCutoff->getActualMaximum(), 1);
	MidPeakNotchFreq->setTextValueSuffix(processor.mpnfCutoff->getLabel());
	MidPeakNotchFreq->setSliderStyle(Slider::LinearVertical);
	MidPeakNotchFreq->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	MidPeakNotchFreq->addListener(this);

	addAndMakeVisible(MidPeakNotchBand = new Slider("new slider"));
	MidPeakNotchBand->setRange(processor.mpnfBand->getActualMinimum(), processor.mpnfBand->getActualMaximum(), 1);
	MidPeakNotchBand->setTextValueSuffix(processor.mpnfBand->getLabel());
	MidPeakNotchBand->setSliderStyle(Slider::Rotary);
	MidPeakNotchBand->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	MidPeakNotchBand->addListener(this);

	addAndMakeVisible(MidPeakNotchGainTxt = new Label("new label",
		TRANS("Peak/Notch Filter Gain")));
	MidPeakNotchGainTxt->setFont(Font(15.00f, Font::plain));
	MidPeakNotchGainTxt->setJustificationType(Justification::centredLeft);
	MidPeakNotchGainTxt->setEditable(false, false, false);
	MidPeakNotchGainTxt->setColour(TextEditor::textColourId, Colours::black);
	MidPeakNotchGainTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(MidPeakNotchBandTxt = new Label("new label",
		TRANS("Mid Peak/Notch Filter Bandwidth")));
	MidPeakNotchBandTxt->setFont(Font(15.00f, Font::plain));
	MidPeakNotchBandTxt->setJustificationType(Justification::centredLeft);
	MidPeakNotchBandTxt->setEditable(false, false, false);
	MidPeakNotchBandTxt->setColour(TextEditor::textColourId, Colours::black);
	MidPeakNotchBandTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(MidPeakNotchFreqTxt = new Label("new label",
		TRANS("Center Freq")));
	MidPeakNotchFreqTxt->setFont(Font(15.00f, Font::plain));
	MidPeakNotchFreqTxt->setJustificationType(Justification::centredLeft);
	MidPeakNotchFreqTxt->setEditable(false, false, false);
	MidPeakNotchFreqTxt->setColour(TextEditor::textColourId, Colours::black);
	MidPeakNotchFreqTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	
	// lpnf
	addAndMakeVisible(LowPeakNotchGain = new Slider("new slider"));
	LowPeakNotchGain->setRange(processor.lpnfGain->getActualMinimum(), processor.lpnfGain->getActualMaximum(), 1);
	LowPeakNotchGain->setTextValueSuffix(processor.lpnfGain->getLabel());
	LowPeakNotchGain->setSliderStyle(Slider::LinearHorizontal);
	LowPeakNotchGain->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	LowPeakNotchGain->addListener(this);

	addAndMakeVisible(LowPeakNotchBand = new Slider("new slider"));
	LowPeakNotchBand->setRange(processor.lpnfBand->getActualMinimum(), processor.lpnfBand->getActualMaximum(), 1);
	LowPeakNotchBand->setTextValueSuffix(processor.lpnfBand->getLabel());
	LowPeakNotchBand->setSliderStyle(Slider::Rotary);
	LowPeakNotchBand->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	LowPeakNotchBand->addListener(this);

	addAndMakeVisible(LowPeakNotchFreq = new Slider("new slider"));
	LowPeakNotchFreq->setRange(processor.lpnfCutoff->getActualMinimum(), processor.lpnfCutoff->getActualMaximum(), 1);
	LowPeakNotchFreq->setTextValueSuffix(processor.lpnfCutoff->getLabel());
	LowPeakNotchFreq->setSliderStyle(Slider::LinearVertical);
	LowPeakNotchFreq->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	LowPeakNotchFreq->addListener(this);

	addAndMakeVisible(LowPeakNotchGainTxt = new Label("new label",
	TRANS("Peak/Notch Filter Gain")));
	LowPeakNotchGainTxt->setFont(Font(15.00f, Font::plain));
	LowPeakNotchGainTxt->setJustificationType(Justification::centredLeft);
	LowPeakNotchGainTxt->setEditable(false, false, false);
	LowPeakNotchGainTxt->setColour(TextEditor::textColourId, Colours::black);
	LowPeakNotchGainTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(LowPeakNotchBandTxt = new Label("new label",
	TRANS("Low Peak/Notch Filter Bandwidth")));
	LowPeakNotchBandTxt->setFont(Font(15.00f, Font::plain));
	LowPeakNotchBandTxt->setJustificationType(Justification::centredLeft);
	LowPeakNotchBandTxt->setEditable(false, false, false);
	LowPeakNotchBandTxt->setColour(TextEditor::textColourId, Colours::black);
	LowPeakNotchBandTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	addAndMakeVisible(LowPeakNotchFreqTxt = new Label("new label",
	TRANS("Center Freq")));
	LowPeakNotchFreqTxt->setFont(Font(15.00f, Font::plain));
	LowPeakNotchFreqTxt->setJustificationType(Justification::centredLeft);
	LowPeakNotchFreqTxt->setEditable(false, false, false);
	LowPeakNotchFreqTxt->setColour(TextEditor::textColourId, Colours::black);
	LowPeakNotchFreqTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	// lsf
	addAndMakeVisible(LowShelfGain = new Slider("new slider"));
	LowShelfGain->setRange(processor.lsfGain->getActualMinimum(), processor.lsfGain->getActualMaximum(), 1);
	LowShelfGain->setTextValueSuffix(processor.lsfGain->getLabel());
	LowShelfGain->setSliderStyle(Slider::LinearHorizontal);
	LowShelfGain->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	LowShelfGain->addListener(this);

	addAndMakeVisible(LowShelfGainTxt = new Label("new label",
		TRANS("Low Shelf Filter Gain")));
	LowShelfGainTxt->setFont(Font(15.00f, Font::plain));
	LowShelfGainTxt->setJustificationType(Justification::centredLeft);
	LowShelfGainTxt->setEditable(false, false, false);
	LowShelfGainTxt->setColour(TextEditor::textColourId, Colours::black);
	LowShelfGainTxt->setColour(TextEditor::backgroundColourId, Colour(0x00000000));

	//[UserPreSize]
	//[/UserPreSize]
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (800, 600);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{

	HighShelfGain = nullptr;
	HighPeakNotchGain = nullptr;
	HighPeakNotchGainTxt = nullptr;
	HighPeakNotchBand = nullptr;
	HighPeakNotchBandTxt = nullptr;
	MidPeakNotchGain = nullptr;
	MidPeakNotchFreq = nullptr;
	MidPeakNotchBand = nullptr;
	LowPeakNotchGain = nullptr;
	LowPeakNotchBand = nullptr;
	LowShelfGain = nullptr;
	HighShelfGainTxt = nullptr;
	LowShelfGainTxt = nullptr;
	MidPeakNotchGainTxt = nullptr;
	MidPeakNotchBandTxt = nullptr;
	LowPeakNotchGainTxt = nullptr;
	LowPeakNotchBandTxt = nullptr;
	HighPeakNotchFreq = nullptr;
	HighPeakNotchFreqTxt = nullptr;
	MidPeakNotchFreqTxt = nullptr;
	LowPeakNotchFreq = nullptr;
	LowPeakNotchFreqTxt = nullptr;
	
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
}

void Mu45effectAudioProcessorEditor::resized()
{
    /* //MU4545_DO_THIS: Set the location in the GUI for each UI component
    int w = 55; int h = 200; int x = 20; int y = 60;
    volumeSlider->setBounds(x, y, w, h);
    x += w + 10;
    cutoffSlider->setBounds(x, y, w, h);
	*/

	// pasted from GUI.cpp
	
	HighShelfGain->setBounds(160, 56, 160, 40);
	HighPeakNotchGain->setBounds(160, 160, 160, 40);
	HighPeakNotchGainTxt->setBounds(192, 120, 125, 24);
	HighPeakNotchBand->setBounds(20, 157, 100, 40);
	HighPeakNotchBandTxt->setBounds(7, 120, 170, 24);
	MidPeakNotchGain->setBounds(160, 273, 160, 40);
	MidPeakNotchBand->setBounds(20, 265, 100, 40);
	LowPeakNotchGain->setBounds(160, 383, 160, 40);
	LowPeakNotchBand->setBounds(20, 384, 100, 40);
	LowShelfGain->setBounds(160, 494, 160, 40);
	HighShelfGainTxt->setBounds(192, 10, 120, 24);
	LowShelfGainTxt->setBounds(203, 451, 110, 24);
	MidPeakNotchGainTxt->setBounds(195, 234, 125, 24);
	MidPeakNotchBandTxt->setBounds(8, 234, 170, 24);
	LowPeakNotchGainTxt->setBounds(192, 342, 125, 24);
	LowPeakNotchBandTxt->setBounds(7, 342, 170, 24);
	HighPeakNotchFreq->setBounds(344, 118, 60, 80);
	HighPeakNotchFreqTxt->setBounds(344, 80, 65, 24);
	MidPeakNotchFreq->setBounds(344, 243, 60, 80);
	MidPeakNotchFreqTxt->setBounds(344, 209, 65, 24);
	LowPeakNotchFreq->setBounds(339, 375, 60, 80);
	LowPeakNotchFreqTxt->setBounds(339, 338, 65, 24);
}

// This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* sliderThatWasMoved)
{
    PluginParameter* parameter = nullptr;
    
    /* MU4545_DO_THIS: make an "else if" for each slider
    if (slider == volumeSlider) {
        parameter = processor.volumeParam;
    }
    else if (slider == cutoffSlider) {
        parameter = processor.filterCutoff;
    }
    //else if (slider == someOtherSlider) {
    //    parameter = processor.someOtherParameter;
    //}

	*/

	// pasted from GUI.cpp
	if (sliderThatWasMoved == HighShelfGain)
	{
		parameter = processor.hsfGain;
	}
	else if (sliderThatWasMoved == HighPeakNotchGain)
	{
		parameter = processor.hpnfGain;
	}
	else if (sliderThatWasMoved == HighPeakNotchBand)
	{
		parameter = processor.hpnfBand;
	}
	else if (sliderThatWasMoved == HighPeakNotchFreq)
	{
		parameter = processor.hpnfCutoff;
	}
	else if (sliderThatWasMoved == MidPeakNotchGain)
	{
		parameter = processor.mpnfGain;
	}
	else if (sliderThatWasMoved == MidPeakNotchFreq)
	{
		parameter = processor.mpnfCutoff;
	}
	else if (sliderThatWasMoved == MidPeakNotchBand)
	{
		parameter = processor.mpnfBand;
	}
	
	else if (sliderThatWasMoved == LowPeakNotchGain)
	{
		parameter = processor.lpnfGain;
	}
	else if (sliderThatWasMoved == LowPeakNotchBand)
	{
		parameter = processor.lpnfBand;
	}
	else if (sliderThatWasMoved == LowShelfGain)
	{
		parameter = processor.lsfGain;
	}
	else if (sliderThatWasMoved == LowPeakNotchFreq)
	{
		parameter = processor.lpnfCutoff;
	}
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(sliderThatWasMoved->getValue()));
    }
    
}

// This gets called every N msec so that sliders can update their value if the host
// changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //MU4545_DO_THIS: Update the value of each slider to match the value in the Processor
    /* volumeSlider->setValue(processor.volumeParam->getActualValue(), dontSendNotification);
    cutoffSlider->setValue(processor.filterCutoff->getActualValue(), dontSendNotification);
	*/
	HighShelfGain->setValue(processor.hsfGain->getActualValue(), dontSendNotification);

	HighPeakNotchFreq->setValue(processor.hpnfCutoff->getActualValue(), dontSendNotification);
	HighPeakNotchGain->setValue(processor.hpnfGain->getActualValue(), dontSendNotification);
	HighPeakNotchBand->setValue(processor.hpnfBand->getActualValue(), dontSendNotification);

	MidPeakNotchFreq->setValue(processor.mpnfCutoff->getActualValue(), dontSendNotification);
	MidPeakNotchGain->setValue(processor.mpnfGain->getActualValue(), dontSendNotification);
	MidPeakNotchBand->setValue(processor.mpnfBand->getActualValue(), dontSendNotification);

	LowPeakNotchFreq->setValue(processor.lpnfCutoff->getActualValue(), dontSendNotification);
	LowPeakNotchGain->setValue(processor.lpnfGain->getActualValue(), dontSendNotification);
	LowPeakNotchBand->setValue(processor.lpnfBand->getActualValue(), dontSendNotification);

	LowShelfGain->setValue(processor.lsfGain->getActualValue(), dontSendNotification);
}



