/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessor::Mu45effectAudioProcessor()
{
    //MU4545_DO_THIS: Create and initialize a PluginParameter for each user parameter
    
	volumeParam = new PluginParameter("volume",     // parameterId
                                        100.0,        // actualDefaultValue
                                        0.0,        // actualMinimum
                                        200.0,      // actualMaximum
                                        "Volume",   // parameterName
                                        "%"); // parameterLabel, can also be String::empty
    addParameter(volumeParam); // Add the param to a list that the Processor keeps.

	// hsf
	hsfGain = new PluginParameter("hsfGain",     // parameterId
									0.0,        // actualDefaultValue
									-96.0,        // actualMinimum
									10.0,      // actualMaximum
									"hsfGain",   // parameterName
									"dB"); // parameterLabel, can also be String::empty
	addParameter(hsfGain); // Add the param to a list that the Processor keeps.

	/*
	hsfCutoff = new PluginParameter("hsfCutoff",     // parameterId
									600.0,        // actualDefaultValue
									600.0,        // actualMinimum
									600.0,      // actualMaximum
									"hsfCutoff",   // parameterName
									"Hz"); // parameterLabel, can also be String::empty
	addParameter(hsfCutoff); // Add the param to a list that the Processor keeps.
    */

	// hpnf
	hpnfGain = new PluginParameter("hpnfGain",     // parameterId
									0.0,        // actualDefaultValue
									-96.0,        // actualMinimum
									10.0,      // actualMaximum
									"hpnfGain",   // parameterName
									"dB"); // parameterLabel, can also be String::empty
	addParameter(hpnfGain); // Add the param to a list that the Processor keeps.

	hpnfBand = new PluginParameter("hpnfBand",     // parameterId
									5.0,        // actualDefaultValue
									0.5,        // actualMinimum
									10.0,      // actualMaximum
									"hpnfBand",   // parameterName
									"Q"); // parameterLabel, can also be String::empty
	addParameter(hpnfBand); // Add the param to a list that the Processor keeps.

	hpnfCutoff = new PluginParameter("hpnfCutoff",     // parameterId
									600.0,        // actualDefaultValue
									50.0,        // actualMinimum
									20000.0,      // actualMaximum
									"hpnfCutoff",   // parameterName
									"Hz"); // parameterLabel, can also be String::empty
	addParameter(hpnfCutoff); // Add the param to a list that the Processor keeps.

	// mpnf
	mpnfGain = new PluginParameter("mpnfGain",     // parameterId
									0.0,        // actualDefaultValue
									-96.0,        // actualMinimum
									10.0,      // actualMaximum
									"mpnfGain",   // parameterName
									"dB"); // parameterLabel, can also be String::empty
	addParameter(mpnfGain); // Add the param to a list that the Processor keeps.

	mpnfBand = new PluginParameter("mpnfBand",     // parameterId
									5.0,        // actualDefaultValue
									0.5,        // actualMinimum
									10.0,      // actualMaximum
									"mpnfBand",   // parameterName
									"Q"); // parameterLabel, can also be String::empty
	addParameter(mpnfBand); // Add the param to a list that the Processor keeps.

	mpnfCutoff = new PluginParameter("mpnfCutoff",     // parameterId
									400.0,        // actualDefaultValue
									50.0,        // actualMinimum
									20000.0,      // actualMaximum
									"mpnfCutoff",   // parameterName
									"Hz"); // parameterLabel, can also be String::empty
	addParameter(mpnfCutoff); // Add the param to a list that the Processor keeps.

	// lpnf
	lpnfGain = new PluginParameter("lpnfGain",     // parameterId
									0.0,        // actualDefaultValue
									-96.0,        // actualMinimum
									10.0,      // actualMaximum
									"lpnfGain",   // parameterName
									"dB"); // parameterLabel, can also be String::empty
	addParameter(lpnfGain); // Add the param to a list that the Processor keeps.

	lpnfBand = new PluginParameter("lpnfBand",     // parameterId
									5.0,        // actualDefaultValue
									0.5,        // actualMinimum
									10.0,      // actualMaximum
									"lpnfBand",   // parameterName
									"Q"); // parameterLabel, can also be String::empty
	addParameter(lpnfBand); // Add the param to a list that the Processor keeps.

	lpnfCutoff = new PluginParameter("lpnfCutoff",     // parameterId
									200.0,        // actualDefaultValue
									50.0,        // actualMinimum
									20000.0,      // actualMaximum
									"lpnfCutoff",   // parameterName
									"Hz"); // parameterLabel, can also be String::empty
	addParameter(lpnfCutoff); // Add the param to a list that the Processor keeps.

	// lsf
	lsfGain = new PluginParameter("lsfGain",     // parameterId
									0.0,        // actualDefaultValue
									-96.0,        // actualMinimum
									10.0,      // actualMaximum
									"lsfGain",   // parameterName
									"dB"); // parameterLabel, can also be String::empty
	addParameter(lsfGain); // Add the param to a list that the Processor keeps.

	/*
	lsfCutoff = new PluginParameter("lsfCutoff",     // parameterId
									200.0,        // actualDefaultValue
									200.0,        // actualMinimum
									200.0,      // actualMaximum
									"lsfCutoff",   // parameterName
									"Hz"); // parameterLabel, can also be String::empty
	addParameter(lsfCutoff); // Add the param to a list that the Processor keeps.
	*/
}

Mu45effectAudioProcessor::~Mu45effectAudioProcessor()
{
}

//==============================================================================
const String Mu45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Mu45effectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Mu45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Mu45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Mu45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Mu45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Mu45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Mu45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
// This gets called before any audio happens
void Mu45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // MU4545_DO_THIS: Use this method as the place to do any pre-playback
    // initialisation that you need..
    fs = sampleRate;
}

void Mu45effectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

// MU4545_DO_THIS: Here is where we calculate the algorithm parameter values
// from the user parameter values
void Mu45effectAudioProcessor::calcAlgorithmParams()
{
    // calculate linear gain from dB volume
    //volumeGain = 0.01 * volumeParam->getActualValue(); // converting percent to gain value
	volumeGain = 1;
	
    // calculate and set coefficients

	// hsf
	float hsfcoeffs[5];    // an array of 5 floats for filter coeffs
	float hsfc = 800;
	float hsfG = hsfGain->getActualValue();
	Mu45FilterCalc::calcCoeffsHighShelf(hsfcoeffs, hsfc, hsfG, fs);

	// now set the filters to use the coefficients we calculated
	hsfL.setCoefficients(hsfcoeffs[0], hsfcoeffs[1], hsfcoeffs[2], hsfcoeffs[3], hsfcoeffs[4]);
	hsfR.setCoefficients(hsfcoeffs[0], hsfcoeffs[1], hsfcoeffs[2], hsfcoeffs[3], hsfcoeffs[4]);

	// hpnf
	float hpnfcoeffs[5];
	float hpnfc = hpnfCutoff->getActualValue();
	float hpnfG = hpnfGain->getActualValue();
	float hpnfQ = hpnfc / hpnfBand->getActualValue();
	Mu45FilterCalc::calcCoeffsPeak(hpnfcoeffs, hpnfc, hpnfG, hpnfQ, fs);

	hpnfL.setCoefficients(hpnfcoeffs[0], hpnfcoeffs[1], hpnfcoeffs[2], hpnfcoeffs[3], hpnfcoeffs[4]);
	hpnfR.setCoefficients(hpnfcoeffs[0], hpnfcoeffs[1], hpnfcoeffs[2], hpnfcoeffs[3], hpnfcoeffs[4]);

	// mpnf
    float mpnfcoeffs[5];
    float mpnfc = mpnfCutoff->getActualValue();
	float mpnfG = mpnfGain->getActualValue();
	float mpnfQ = mpnfc / mpnfBand->getActualValue();
    Mu45FilterCalc::calcCoeffsPeak(mpnfcoeffs, mpnfc, mpnfG, mpnfQ, fs);
    
    mpnfL.setCoefficients(mpnfcoeffs[0], mpnfcoeffs[1], mpnfcoeffs[2], mpnfcoeffs[3], mpnfcoeffs[4]);
    mpnfR.setCoefficients(mpnfcoeffs[0], mpnfcoeffs[1], mpnfcoeffs[2], mpnfcoeffs[3], mpnfcoeffs[4]);

	// lpnf
	float lpnfcoeffs[5];
	float lpnfc = lpnfCutoff->getActualValue();
	float lpnfG = lpnfGain->getActualValue();
	float lpnfQ = lpnfc / lpnfBand->getActualValue();
	Mu45FilterCalc::calcCoeffsPeak(lpnfcoeffs, lpnfc, lpnfG, lpnfQ, fs);

	lpnfL.setCoefficients(lpnfcoeffs[0], lpnfcoeffs[1], lpnfcoeffs[2], lpnfcoeffs[3], lpnfcoeffs[4]);
	lpnfR.setCoefficients(lpnfcoeffs[0], lpnfcoeffs[1], lpnfcoeffs[2], lpnfcoeffs[3], lpnfcoeffs[4]);

	// lsf
	float lsfcoeffs[5];    // an array of 5 floats for filter coeffs
	float lsfc = 200;
	float lsfG = lsfGain->getActualValue();
	Mu45FilterCalc::calcCoeffsLowShelf(lsfcoeffs, lsfc, lsfG, fs);

	// now set the filters to use the coefficients we calculated
	lsfL.setCoefficients(lsfcoeffs[0], lsfcoeffs[1], lsfcoeffs[2], lsfcoeffs[3], lsfcoeffs[4]);
	lsfR.setCoefficients(lsfcoeffs[0], lsfcoeffs[1], lsfcoeffs[2], lsfcoeffs[3], lsfcoeffs[4]);
}

void Mu45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    // Before we process a buffer, update the algorithm params
    calcAlgorithmParams();
    
    // This version assumes we always have 2 channels
    float* left = buffer.getWritePointer (0);
    float* right = buffer.getWritePointer (1);
    const int numSamps = buffer.getNumSamples();
    
    // MU4545_DO_THIS: This is the "inner loop" where we calculate each output sample
    for (int samp = 0; samp < numSamps; samp++)
    {
        left[samp] = volumeGain * left[samp];           // apply the gain
		left[samp] = hsfL.tick(left[samp]);			// filter it
		left[samp] = hpnfL.tick(left[samp]);
        left[samp] = mpnfL.tick(left[samp]);
		left[samp] = lpnfL.tick(left[samp]);
		left[samp] = lsfL.tick(left[samp]);
        
        right[samp] = volumeGain * right[samp];
		right[samp] = hsfR.tick(right[samp]);
		right[samp] = hpnfR.tick(right[samp]);
        right[samp] = mpnfR.tick(right[samp]);
		right[samp] = lpnfR.tick(right[samp]);
		right[samp] = lsfR.tick(right[samp]);
    }
}

//==============================================================================
bool Mu45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Mu45effectAudioProcessor::createEditor()
{
    return new Mu45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Mu45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Mu45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Mu45effectAudioProcessor();
}
